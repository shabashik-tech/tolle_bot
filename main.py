# -*- coding: utf-8 -*-
"""
–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è—é—â–∏–π:
- –≤—ã–≤–µ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ –∫–Ω–∏–≥–∏ –¢–∏—à–∏–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç;
- –≤—ã–≤–µ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ "9 –ø—Ä–∞–∫—Ç–∏–∫";
- —Å–∫–∞—á–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –≤—ã–±–æ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–Ω–∏–≥–∏ "–ü—Ä–∞–∫—Ç–∏–∫–∞";
"""
import pickle

from scripts.add_user_to_base import add_new_user
from scripts.logger import configure_logging

import telebot
from scripts.parser_book import random_citate, random_image, list_audio, power_of_now, white_noise
from settings import TOKEN
from telebot import types


bot = telebot.TeleBot(token=TOKEN)
USER_ID = set()


def main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(True, True)
    keyboard.row('–¢–∏—à–∏–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç - —Ü–∏—Ç–∞—Ç—ã üìú')
    keyboard.row('–ü–†–ê–ö–¢–ò–ö–ê - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé¥', '–ü–†–ê–ö–¢–ò–ö–ê - –∞—É–¥–∏–æ üéµ')
    keyboard.row('–ê—É–¥–∏–æ–∫–Ω–∏–≥–∏ üìö')
    keyboard.row('–ë–µ–ª—ã–π —à—É–º üå´Ô∏è')
    return keyboard


def book_keyboard():
    keyboard = types.ReplyKeyboardMarkup(True, True)
    keyboard.row('1. –°–∏–ª–∞ –º–æ–º–µ–Ω—Ç–∞ —Å–µ–π—á–∞—Å')
    keyboard.row('2. –ù–æ–≤–∞—è –∑–µ–º–ª—è')
    keyboard.row('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    return keyboard


main_keyboard = main_keyboard()


@bot.message_handler(commands=['start'])
def send_welcome(message):
    answer = f'~\n' \
             f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.first_name}! \n' \
             f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç–∏—à–∏–Ω–∞ - —Ç–≤–æ—è —Å—É—â–Ω–æ—Å—Ç–Ω–∞—è –ø—Ä–∏—Ä–æ–¥–∞. –ß—Ç–æ –µ—Å—Ç—å —Ç–∏—à–∏–Ω–∞? –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–ª–∏ ' \
             f'–æ—Å–æ–∑–Ω–∞–Ω–∏–µ, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–º—É –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —á–∏—Ç–∞–µ–º—ã–µ —Å–µ–π—á–∞—Å —Å—Ç—Ä–æ–∫–∏.\n' \
             f'–¢—ã –∏ –µ—Å—Ç—å —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–∏–µ, –ø—Ä–∏–Ω—è–≤—à–µ–µ —Ñ–æ—Ä–º—É –ª–∏—á–Ω–æ—Å—Ç–∏.\n\n' \
             f'–ü–æ—Å–ª—É—à–∞–π –æ —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç —Ç–∏—à–∏–Ω–∞. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–¢–∏—à–∏–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç..."\n' \
             f'~\n'
    bot.send_message(
        message.chat.id,
        answer,
        reply_markup=main_keyboard,
    )
    add_new_user(message)


@bot.message_handler(commands=['info'])
def send_info(message):
    markup_inline = types.InlineKeyboardMarkup()  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    item_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    item_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    markup_inline.add(item_yes, item_no)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    bot.send_message(
        message.chat.id,
        '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ?',
        reply_markup=markup_inline,
    )
    add_new_user(message)


@bot.callback_query_handler(func=lambda message: True)
def callback_inlines(message):

    # callback –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
    chat_id = message.message.chat.id
    if 'audio' in message.data:
        track = message.data.split("_")[1]
        files = list_audio()
        for file in files:
            if track == file:
                audio = open(file, 'rb')
                bot.send_audio(chat_id,
                               audio,
                               reply_markup=main_keyboard,
                               )
    if message.data == 'return_menu':
        bot.send_message(
            chat_id,
            '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
            reply_markup=main_keyboard,
        )

    # callback –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –∫–Ω–∏–≥–∏ Power of Now
    if 'power' in message.data:
        track = message.data.split('_')[3]
        files = power_of_now()
        for file in files:
            if track == file:
                audio = open(file, 'rb')
                bot.send_audio(chat_id,
                               audio,
                               reply_markup=main_keyboard,
                               )

    # callback –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±—É–ª–æ–≥–æ —à—É–º–∞
    if 'white' in message.data: # todo –ß—Ç–æ —Ç–æ –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        track = message.data.split('_')[1]
        files = white_noise()
        for file in files:
            if track == file:
                audio = open(file, 'rb')
                bot.send_audio(chat_id,
                               audio,
                               reply_markup=main_keyboard,
                               )

    # callback –¥–ª—è –∏–Ω–ª–∞–π–Ω–∞ /info
    if message.data == 'yes':
        markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup_reply.row('–ú–æ–π ID', '–ú–æ–π –Ω–∏–∫')
        markup_reply.row('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        bot.send_message(
            message.message.chat.id,
            '–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫',
            reply_markup=markup_reply,
        )
    elif message.data == 'no':
        pass


# –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ :)
@bot.message_handler(content_types=['text'])
def get_text(message):
    if message.text == '–¢–∏—à–∏–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç - —Ü–∏—Ç–∞—Ç—ã üìú':
        first_word = random_citate()
        bot.send_message(
            message.chat.id,
            first_word,
            reply_markup=main_keyboard,
        )
    elif message.text == '–ü–†–ê–ö–¢–ò–ö–ê - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé¥':
        file = random_image()
        image = open(file, 'rb')
        bot.send_photo(
            message.chat.id,
            image,
            reply_markup=main_keyboard,
        )
    elif message.text == '–ü–†–ê–ö–¢–ò–ö–ê - –∞—É–¥–∏–æ üéµ':
        chat_id = message.chat.id
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ñ–∞–π–ª'
        bot.send_message(
            chat_id, text,
            parse_mode='HTML',
            reply_markup=audio_keyboard(chat_id),
        )
    elif message.text == '–ê—É–¥–∏–æ–∫–Ω–∏–≥–∏ üìö':
        bot.send_message(
            message.chat.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–Ω–∏–≥—É: ',
            reply_markup=book_keyboard()
        )
    elif message.text == '1. –°–∏–ª–∞ –º–æ–º–µ–Ω—Ç–∞ —Å–µ–π—á–∞—Å':
        chat_id = message.chat.id
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ñ–∞–π–ª'
        bot.send_message(
            chat_id, text,
            parse_mode='HTML',
            reply_markup=audio_keyboard(chat_id),
        )
    elif message.text == '–ë–µ–ª—ã–π —à—É–º üå´Ô∏è':
        chat_id = message.chat.id
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ñ–∞–π–ª'
        bot.send_message(
            chat_id, text,
            parse_mode='HTML',
            reply_markup=white_keyboard(chat_id),
        )
    elif message.text == '–ú–æ–π ID':
        bot.send_message(
            message.chat.id,
            f'–í–∞—à ID: {message.from_user.id}',
        )
    elif message.text == '–ú–æ–π –Ω–∏–∫':
        bot.send_message(
            message.chat.id,
            f'–í–∞—à username: {message.from_user.first_name}',
        )
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        bot.send_message(
            message.chat.id,
            '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            reply_markup=main_keyboard,
        )


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ê—É–¥–∏–æ: "elif message.text == '–ü—Ä–∞–∫—Ç–∏–∫–∞ (–∞—É–¥–∏–æ)...':"
def audio_keyboard(chat_id):
    keyboard = types.InlineKeyboardMarkup()
    files = list_audio()
    for file in files:
        keyboard.add(types.InlineKeyboardButton(
            text=f'üéµ {file[6:]}',
            callback_data=f'audio_{file}'),
        )
    keyboard.add(types.InlineKeyboardButton(
        text='‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
        callback_data='return_menu'),
    )
    return keyboard


def power_of_now_keyboard(chat_id):
    keyboard = types.InlineKeyboardMarkup()
    files = power_of_now()
    for file in files:
        keyboard.add(types.InlineKeyboardButton(
            text=f'üéµ {file[24:]}',
            callback_data=f'power_of_now_{file}'),
        )
    keyboard.add(types.InlineKeyboardButton(
        text='‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
        callback_data='return_menu'),
    )
    return keyboard


def white_keyboard(chat_id):
    keyboard = types.InlineKeyboardMarkup()
    files = white_noise()
    for file in files:
        keyboard.add(types.InlineKeyboardButton(
            text=f'üéµ {file[18:]}',
            callback_data=f'white_{file}'),
        )
    keyboard.add(types.InlineKeyboardButton(
        text='‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
        callback_data='return_menu'),
    )
    return keyboard


if __name__ == '__main__':
    configure_logging()
    bot.polling()
